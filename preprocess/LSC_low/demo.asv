% This demo is provided for image preprocessing of SMU-Net.
% You can easily get the foreground&background saliency maps, shape
% constraint map, and the position map.
% You are free to use, change or redistribute this code for any
% non-commrecial purposes.If you use this software,please cite the
% following in any resulting publication:
% [1] Zhengqin Li, Jiansheng Chen, Superpixel Segmentation using Linear 
%     Spectral Clustering, IEEE Conference on Computer Vision and Pattern 
%     Recognition (CVPR), Jun. 2015 
% [2] Ning, Zhenyuan and Zhong, Shengzhou and Feng, Qianjin and Chen, Wufan and Zhang, Yu, 
%     SMU-Net: Saliency-Guided Morphology-Aware U-Net for Breast Lesion Segmentation in Ultrasound Image,
%     IEEE Transactions on Medical Imaging,2021


clear all;clc;close all;
%% generate LSCS superpixel and the final foreground and background saliency map 
fprintf('running LSCS to get low-level map\n');
file_path = './original/';% original image path
mcg_sp_path = './sp_high/';% high-level image path, which are generated by MCG
img_path_list = dir(strcat(file_path,'*.png'));
img_num = length(img_path_list);
fore_sal_path = './foreground/';
back_sal_path = './background/';
mkdir(fore_sal_path);
mkdir(back_sal_path);
        
if img_num > 0 
    gaus=fspecial('gaussian',3);
    ratio=0.075; 
    for j = 1:img_num
        image_name = img_path_list(j).name;
        img = imread(strcat(file_path,image_name)); 
        fprintf('%d %s\n',j,strcat(file_path,image_name));
        if (length(size(img))<3)
            img=repmat(img,[1,1,3]);
        end
        I=imfilter(img,gaus);
        coordinate=xlsread('./point.xls','Sheet1','B1:G10');
        lsc_8=LSC_mex(I,8,ratio);
        lsc_15=LSC_mex(I,15,ratio);
        lsc_50=LSC_mex(I,50,ratio);
        [m,n]=size(lsc_8);
        sp_8 = zeros(size(lsc_8));
        sp_15 = zeros(size(lsc_8));
        sp_50 = zeros(size(lsc_8));
        for x=1:m
            for y=1:n
                if sp_8(x,y)==lsc_8(coordinate(j,1),coordinate(j,2)) || lsc_8(x,y)==lsc_8(coordinate(j,3),coordinate(j,4)) || lsc_8(x,y)==lsc_8(coordinate(j,5),coordinate(j,6))
                    sp_8(x,y)=255;
                end
                if sp_15(x,y)==lsc_15(coordinate(j,1),coordinate(j,2)) || lsc_15(x,y)==lsc_15(coordinate(j,3),coordinate(j,4)) || lsc_15(x,y)==lsc_15(coordinate(j,5),coordinate(j,6))
                    sp_15(x,y)=255;
                end
                if sp_50(x,y)==lsc_50(coordinate(j,1),coordinate(j,2)) || lsc_50(x,y)==lsc_50(coordinate(j,3),coordinate(j,4)) || lsc_50(x,y)==lsc_50(coordinate(j,5),coordinate(j,6))
                    sp_50(x,y)=255;
                end
            end
        end
        merge = sp_8+sp_50+sp_15;       
        lsc_low=double(Normalize(merge));%generated low-level map
        mcg_high = double(imread(strcat(mcg_sp_path,image_name)));%read high-level map
        fore_sal=lsc_low+0.5*mcg_high;%merge low- and high-level maps to get foreground saliency map
        fore_sal = uint8(Normalize(fore_sal));
        back_sal = 255-fore_sal;% generate background map
        imwrite(fore_sal,[fore_sal_path,image_name],'png');
        imwrite(fore_sal,[back_sal_path,image_name],'png');
    end
else
    fprintf('%s\n','No file exists in this dir, please check your dir.')
end
%% generate shape constraint map
clear all;clc;close all;

file_path = './gt/';% 图像文件夹路径 ?
img_path_list = dir(strcat(file_path,'*.png'));%获取该文件夹中所有PNG格式的图像 ?
img_num = length(img_path_list);%获取图像总数量?
shape_path = './spm';
mkdir(shape_path)

if img_num > 0 %有满足条件的图像 ?
    for m = 1:img_num %逐一读取图像 ?
        image_name = img_path_list(m).name;% 图像名 ?
        image = imread(strcat(file_path,image_name)); 
        fprintf('%d %s\n',m,strcat(file_path,image_name));% 显示正在处理的图像名 
        %图像处理过程
        [cloumn,row] = size(image);
        label = zeros(size(image));
        p = 0;
        z = 0;
        for x = 1:cloumn
            for y = 1:row
                if x>1 && x<cloumn-1 && y>1 && y <row-1
                    if image(x,y) >0 && (image(x-1,y-1)==0 || image(x,y-1)==0 || image(x+1,y-1)==0 || image(x-1,y)==0 || image(x+1,y)==0 || image(x-1,y+1)==0 || image(x,y+1)==0 || image(x+1,y+1)==0)
                        p = p+1;
                    end
                end
            end
        end
        coordinate = zeros([2,p]);
        dist = zeros([1,p]);
        for x = 1:cloumn
            for y = 1:row
                if x > 1 && x < cloumn-1 && y > 1 && y < row-1
                    if image(x,y) > 0 && (image(x-1,y-1)==0 || image(x,y-1)==0 || image(x+1,y-1)==0 || image(x-1,y)==0 || image(x+1,y)==0 || image(x-1,y+1)==0 || image(x,y+1)==0 || image(x+1,y+1)==0)
                        if z < p
                            z = z+1;
                        end
                        coordinate(1,z) = x;
                        coordinate(2,z) = y;
                    end
                end
            end
        end
        %fprintf('%d\n',coordinate);
        for i = 1:cloumn
            for j = 1:row
                for k = 1:p
                    if i == coordinate(1,k) && j == coordinate(2,k)
                        dist(1,k) = 0;
                    else
                        distance = uint32(sqrt((i - coordinate(1,k))^2 + (j - coordinate(2,k))^2) + 0.5);
                        dist(1,k) = distance;
                    end
                end
                min_data = dist(1,1);
                for q = 1:p
                    if min_data > dist(1,q)
                        min_data = dist(1,q);
                    end
                end
                label(i,j) = min_data;
                clear dist;
            end
        end
        label = 255-label;
        clear coordinate;
        label = uint8(Normalize(label));
        imshow(label);
        imwrite(label,['D:\DATA\OASBUD\256\pre_sdm1\',image_name],'png');
    end 
end
%% generate position map